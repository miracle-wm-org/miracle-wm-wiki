{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"miracle-wm","text":"<p>miracle-wm is a Wayland compositor based on Mir. It features a tiling window manager at its core, very much in the style of i3 and sway. Miracle provides an experience that is flashier and more feature-rich than either of those compositors, like swayfx.</p> <p>See the installation guide for installation instructions on your platform.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Support for manual tiling window management</li> <li>Support for floating window management</li> <li>Driven by a YAML configuration file</li> <li>Support for many common wayland protocols which you can see on Wayland Explorer</li> <li>Support for a wide array of graphics cards, including hybrid systems and outputs driven by Nvidia's proprietary drivers</li> <li>Workspace support</li> <li>Support for i3 ipc</li> <li>Animations</li> <li>Window bordering</li> <li>etc.</li> </ul>"},{"location":"#links","title":"Links","text":"<ul> <li>Github Repository</li> <li>Trello Board</li> <li>Snapcraft.io listing</li> <li>Fedora Miracle Spin</li> <li>Mir, the library that <code>miracle-wm</code> uses for all of the heavy-lifting</li> <li>Miriway, another compositor built on top of Mir</li> </ul> <p>Note</p> <p>If none of this makes any sense to you or you're new to Wayland or Linux, check out the What is a Wayland compositor? document for a structured walk through the entire ecosystem.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>The goal is to have an environment that I am comfortable daily-driving by July 2025. This goal will be marked by the <code>1.0.0</code> release. Until then, all releases will be <code>0.x.0</code>.</p> <p>The dates attached to these releases aren't set in stone. Any release may come earlier if the work is done. Also, new features may be added to the release while it's in progress if priority changes, which may push back the release date.</p>"},{"location":"roadmap/#010","title":"\u2705 0.1.0","text":"<p>Proof of Concept (Due: February 17th 2024)</p> <p>Features:</p> <ul> <li> Window management<ul> <li> Layout of new windows</li> <li> Delete window</li> <li> Resizing windows</li> <li> Gaps in windows</li> <li> Account for minimum sizes on windows (e.g. gedit)</li> <li> Handle exclusion zones</li> <li> Handle fullscreen windows</li> </ul> </li> <li> Navigation<ul> <li> Changing selected window with keyboard</li> <li> Moving window with keyboard shortcuts</li> </ul> </li> <li> Outputs<ul> <li> Output creation</li> <li> Output updating</li> <li> output deletion</li> </ul> </li> <li> Application quit command</li> <li> Workspaces<ul> <li> Workspace switching</li> <li> Moving windows between workspaces</li> </ul> </li> <li> Configuration<ul> <li> Gap size</li> <li> Action key</li> <li> Startup apps</li> <li> Startup apps</li> <li> Override default keybindings</li> <li> Custom keybindings</li> </ul> </li> </ul>"},{"location":"roadmap/#020","title":"\u2705 0.2.0","text":"<p>Stabilization + Usability (Due: April 15th 2024)</p> <p>Features:</p> <ul> <li> Major bugs + performance<ul> <li> No crashes after a week of daily-driving</li> </ul> </li> <li> Configuration<ul> <li> Hot reloading</li> <li> Resize jump</li> <li> Outer gaps</li> </ul> </li> <li> Floating windows<ul> <li> Floating window support (pop out of/into tiles, resizing, moving)</li> <li> \"Pin to workspace\" mode</li> </ul> </li> <li> I3 IPC support for workspaces</li> <li> Packaging<ul> <li> Deb (jammy, mantic, noble, multi-architecture)</li> <li> Fedora</li> </ul> </li> </ul>"},{"location":"roadmap/#030","title":"\u2705 0.3.0","text":"<p>Aimations + Sway IPC Release (Due: June 15th 2024)</p> <p>This release relies on having the Mir's renderer capabilities opened up to us. If we can override the renderer, we can put whatever we like on the screen.</p> <p>Features:</p> <ul> <li> Highlight border around selected window (carry over from 0.2.0)</li> <li> Animation (requires access to Mir renderer)<ul> <li> Window movement interpolation</li> <li> Window size interpolation</li> <li> Workspace change</li> <li> Move window to workspace</li> <li> Opening</li> <li> Configuration support</li> </ul> </li> <li> Multi monitor support<ul> <li> Zero monitors</li> </ul> </li> </ul>"},{"location":"roadmap/#040","title":"0.4.0","text":"<p>Complete i3 ipc implementation (Due: November 30th 2024)</p> <p>Features:</p> <ul> <li> Stacking windows</li> <li> Full I3 IPC integration<ul> <li> Support for i3 containers</li> </ul> </li> <li> Increase test coverage using the new harness</li> </ul>"},{"location":"roadmap/#050","title":"\u2705 0.5.0","text":"<p>Pointer Support (Due: January 2025)</p> <p>Features:</p> <ul> <li> Pointer support for tiling actions<ul> <li> Drag tiles around</li> <li> Resize tiles with pointer</li> </ul> </li> <li> Animation<ul> <li> Closing windows</li> </ul> </li> </ul>"},{"location":"roadmap/#060","title":"\ud83d\udea7 0.6.0","text":"<p>Settings Application (Due May 2025)</p> <p>Features:</p> <ul> <li> Settings application</li> </ul>"},{"location":"roadmap/#070","title":"0.7.0","text":"<p>Features: - [ ] TBD</p>"},{"location":"roadmap/#100","title":"1.0.0","text":"<p>Feature Complete</p> <p>Features:</p> <ul> <li> Display Configuration</li> <li> Bug free</li> <li> Tons of test coverage</li> <li> IDEA: Workspace/window overview view (similar to GNOME)</li> <li> IDEA: Context menu on window with support for actions</li> <li> IDEA: Focus mode, where the focused application appears up front and center</li> <li> IDEA: A minimal default shell, including a panel, launcher, background, etc.</li> <li> IDEA: \"Freestyle tiling\": This would mean that tiling can extend beyond the screen and that the screen can be navigated via scrolling, panning, or anchor points. Workspaces would still be available in this mode, although they would be less relevant.</li> <li> IDEA: Workspaces could be unified in one mega scrolling view to give the illusion of one continuous workspace with \"sections\"</li> </ul>"},{"location":"screenshare/","title":"Screen Sharing","text":"<p>Screensharing in Wayland is done with the help of Portals. Portals were initially designed to allow applications sandboxes via Flatpak to access resources of the desktop, but have since gained popularity outside of the realm of Flatpaks. In our case, we can use the screen sharing portal to allow applications to access the contents of the Wayland compositor.</p> <p>Note</p> <p>Please be aware that you will only be able to share a single screen with this method, not individual windows.</p>"},{"location":"screenshare/#setup","title":"Setup","text":""},{"location":"screenshare/#installation","title":"Installation","text":"<p>First, we need to install xdg-desktop-portal-wlr. Unfortunately, Mir only has support for v0.5.0 of this software, so we will need to checkout the source  at a particualr commit:</p> <pre><code>git clone https://github.com/emersion/xdg-desktop-portal-wlr\ncd xdg-desktop-portal-wlr\ngit checkout 7c0f352  # This is release 0.5.0\n</code></pre> <p>Next, we can build the project: <pre><code>meson setup builddir --prefix=/usr\ncd builddir\nninja -j4\nsudo ninja install\n</code></pre></p>"},{"location":"screenshare/#configuration","title":"Configuration","text":"<p>First, copy <code>/usr/share/xdg-desktop-portal/portals/wlr.portal</code> to <code>/usr/share/xdg-desktop-portal/portals/mir.portal</code></p> <p>Next, modify <code>/usr/share/xdg-desktop-portal/portals/mir.portal</code>:</p> <pre><code>[portal]\nDBusName=org.freedesktop.impl.portal.desktop.wlr\nInterfaces=org.freedesktop.impl.portal.Screenshot;org.freedesktop.impl.portal.ScreenCast;\n-UseIn=wlroots;sway;Wayfire;river\n+UseIn=mir\n</code></pre> <p>Finally, create a file at <code>/etc/xdg/xdg-desktop-portal-wlr/config</code> with: <pre><code>[screencast]\nmax_fps=30\nchooser_type=simple\nchooser_cmd=slurp -f %o -or\n</code></pre></p> <p>Note that you must have <code>slurp</code> installed on your machine.</p>"},{"location":"screenshare/#running","title":"Running","text":"<p>Build miracle with the systemd cmake flag: <code>-DSYSTEMD_INTEGRATION=1</code>. Next, add the following startup application to miracle:</p> <pre><code># ~/.config/miracle-wm/config.yaml\n\nstartup_apps:\n    - command: systemd-run --user /usr/libexec/xdg-desktop-portal --replace\n      in_systemd_scope: true\n</code></pre> <p>This will make it so that your regular screensharing mechanism is disabled at runtime in favor of our new one.</p> <p>Finally, restart your compositor and then open up <code>obs-studio</code> or <code>Google Meet</code> and see that you are able to share your screen.</p>"},{"location":"configuration/action_key/","title":"Action Key","text":"<p>The action key defines the primary key that will initiate a command in the compositor. Default Keybinds and Custom Actions can refer to this key using the word <code>primary</code> as a modifier key. Please see those configuration options for more info.</p>"},{"location":"configuration/action_key/#key","title":"Key","text":"<pre><code>action_key\n</code></pre>"},{"location":"configuration/action_key/#value","title":"Value","text":"<p>A <code>modifier</code> string, which is defined as a name in the following table:</p> Name Description <code>alt</code> Any alt key <code>alt_left</code> The left alt key only <code>alt_right</code> The right alt key only <code>shift</code> Any shift key <code>shift_left</code> The left shift key only <code>shift_right</code> The right shift key only <code>ctrl</code> Any ctrl key <code>ctrl_left</code> The left ctrl key only <code>ctrl_right</code> The right ctrl key only <code>meta</code> The <code>super</code> or <code>windows</code> key <code>meta_left</code> The left <code>super</code> or <code>windows</code> key only <code>meta_right</code> The right <code>super</code> or <code>windows</code> key only <code>sym</code> The sym key <code>function</code> The <code>fn</code> key <code>caps_lock</code> The caps lock key <code>num_lock</code> The num lock key <code>scroll_lock</code> The scroll lock key"},{"location":"configuration/action_key/#default","title":"Default","text":"<pre><code>meta\n</code></pre> <p>This is the <code>super</code> or <code>windows</code> key.</p>"},{"location":"configuration/action_key/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\naction_key: shift\n</code></pre>"},{"location":"configuration/animations/","title":"Animations","text":"<p>Miracle supports a number of different built-in animations that can be configured by the user. If you would like to turn off animations by default, please see Enable Animations.</p>"},{"location":"configuration/animations/#key","title":"Key","text":"<pre><code>animations\n</code></pre>"},{"location":"configuration/animations/#value","title":"Value","text":"<p>A list of: <pre><code># The event that you want to animate\nevent: window_open,\n    window_move,\n    window_close,\n    workspace_switch\n\n# The type of animation that will happen when the event is triggered\ntype: disabled,\n    slide,\n    grow,\n    shrink,\n\n# The interpolation function applied to the animation.\n# https://easings.net/ is a great resource to describe these\nfunction: linear,\n    ease_in_sine,\n    ease_out_sine,\n    ease_in_out_sine,\n    ease_in_quad,\n    ease_out_quad,\n    ease_in_out_quad,\n    ease_in_cubic,\n    ease_out_cubic,\n    ease_in_out_cubic,\n    ease_in_quart,\n    ease_out_quart,\n    ease_in_out_quart,\n    ease_in_quint,\n    ease_out_quint,\n    ease_in_out_quint,\n    ease_in_expo,\n    ease_out_expo,\n    ease_in_out_expo,\n    ease_in_circ,\n    ease_out_circ,\n    ease_in_out_circ,\n    ease_in_back,\n    ease_out_back,\n    ease_in_out_back,\n    ease_in_elastic,\n    ease_out_elastic,\n    ease_in_out_elastic,\n    ease_in_bounce,\n    ease_out_bounce,\n    ease_in_out_bounce\n\n# Time in seconds that the animation will take to complete\nduration: float\n\n# Constant values that you can tweak for the various easing\n# functions. You can find their meanings on https://easings.net/\nc1: float  # default: 1.2\nc2: float  # default: 1.83\nc3: float  # default: 2.2\nc4: float  # default: 2.0943951023931953\nc5: float  # default: 1.3962634015954636\nn1: float  # default: 7.5625\nd1: float  # default: 2.75\n</code></pre></p>"},{"location":"configuration/animations/#default","title":"Default","text":"<pre><code>animations:\n    - event: window_open\n      type: grow\n      function: ease_in_out_back\n      duration: 0.25\n    - event: window_move\n      type: slide\n      function: ease_in_out_back\n      duration: 0.25\n    - event: window_close\n      type: shrink\n      function: ease_out_back\n      duration: 0.25\n    - event: workspace_switch\n      type: slide\n      function: ease_out_sine\n      duration: 0.175\n</code></pre>"},{"location":"configuration/animations/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\n# Override the workspace switching animations such that it takes\n# 1s and linearally interpolates to the target workspace\nanimations:\n  - event: workspace_switch\n    type: slide\n    duration: 1\n    function: linear\n</code></pre>"},{"location":"configuration/border/","title":"Border","text":"<p>Specify a border for non-focused and focused tiles.</p>"},{"location":"configuration/border/#key","title":"Key","text":"<pre><code>border\n</code></pre>"},{"location":"configuration/border/#value","title":"Value","text":"<pre><code>border:\n  size: int  # Size in pixels\n  color: Color # Hex color (rgba) or rgba YAML object\n  focus_color: Color # Hex color (rgba) or rgba YAML object\n</code></pre>"},{"location":"configuration/border/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nborder:\n  size: 2\n  color: 0xffff0000\n  focus_color:\n    r: 0\n    g: 255\n    b: 0\n    a: 255\n</code></pre>"},{"location":"configuration/custom_actions/","title":"Custom Actions","text":"<p>The user may define a list of custom actions, which are shell commands bound to a specific key combination. These actions always have preference over those defined in Default Keybinds when they are bound to the same key combination.</p>"},{"location":"configuration/custom_actions/#key","title":"Key","text":"<pre><code>custom_actions\n</code></pre>"},{"location":"configuration/custom_actions/#value","title":"Value","text":"<p>A list of: </p> <pre><code># The shell command that you want to execute\n- command: string\n\n# The key action that will trigger the default action\n - action: \"up\" | \"down\" | \"repeat\" | \"modifiers\"\n\n# A list of modifiers that need to accompany the action for the command to happen\n- modifiers: Modifier[]\n\n# Name of the keycode that the action should respond to.\n# See https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h\n# for the list of available keycodes (e.g. KEY_ENTER, KEY_Z, etc.)\n- key: KeyCodeName\n</code></pre> <p>A <code>Modifier</code> is defined as one of the following names:</p> Name Description <code>primary</code> the key defined by the Action Key <code>alt</code> Any alt key <code>alt_left</code> The left alt key only <code>alt_right</code> The right alt key only <code>shift</code> Any shift key <code>shift_left</code> The left shift key only <code>shift_right</code> The right shift key only <code>ctrl</code> Any ctrl key <code>ctrl_left</code> The left ctrl key only <code>ctrl_right</code> The right ctrl key only <code>meta</code> The <code>super</code> or <code>windows</code> key <code>meta_left</code> The left <code>super</code> or <code>windows</code> key only <code>meta_right</code> The right <code>super</code> or <code>windows</code> key only <code>sym</code> The sym key <code>function</code> The <code>fn</code> key <code>caps_lock</code> The caps lock key <code>num_lock</code> The num lock key <code>scroll_lock</code> The scroll lock key"},{"location":"configuration/custom_actions/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\ncustom_actions:           # Set meta + D to open wofi\n  - command: wofi --show=drun\n    action: down\n    modifiers:\n      - primary\n    key: KEY_D\n</code></pre>"},{"location":"configuration/default_keybinds/","title":"Default Keybinds","text":"<p>The compositors comes ships with a number of built-in commands. By default, these commands are bound to preset keybinds, but the user may change them to whatever they want. These commands may be overridden more than once and will respond to multiple key combinations as a result. Defining at least one override disables the default action.</p> <p>The default commands defined in the compositor are described in this table:</p> Name Description Keybind <code>terminal</code> Opens a new terminal <code>\u2756 Super + Enter</code> <code>request_vertical</code> Requests that the current window layout future windows vertially <code>\u2756 Super + v</code> <code>request_horizontal</code> Requests that the current window layout future windows horizontaly <code>\u2756 Super + h</code> <code>select_up</code> Select the window above currently selected window <code>\u2756 Super + \u2191</code> <code>select_down</code> Select the window above currently selected window <code>\u2756 Super + \u2193</code> <code>select_left</code> Select the window above currently selected window <code>\u2756 Super + \u2190</code> <code>select_right</code> Select the window above currently selected window <code>\u2756 Super + \u2192</code> <code>move_up</code> Move the currently selected window upwards <code>\u2756 Super + \u21e7 Shift + \u2191</code> <code>move_down</code> Move the currently selected window downwards <code>\u2756 Super + \u21e7 Shift + \u2193</code> <code>move_left</code> Move the currently selected window to the left <code>\u2756 Super + \u21e7 Shift + \u2190</code> <code>move_right</code> Move the currently selected window to the right <code>\u2756 Super + \u21e7 Shift + \u2192</code> <code>toggle_resize</code> Toggle resize mode on the active window <code>\u2756 Super + r</code> <code>resize_up</code> When resize mode is toggled on, this will decrease the size of the window vertically <code>\u2756 Super + \u2191</code> (only in resize mode) <code>resize_down</code> When resize mode is toggled on, this will increase the size of the window vertically <code>\u2756 Super + \u2193</code> (only in resize mode) <code>resize_left</code> When resize mode is toggled on, this will decrease the size of the window horizontally <code>\u2756 Super + \u2190</code> (only in resize mode) <code>resize_down</code> When resize mode is toggled on, this will increase the size of the window horizontally <code>\u2756 Super + \u2192</code> (only in resize mode) <code>fullscreen</code> Fullscreen the currently selected window <code>\u2756 Super + f</code> <code>quit_active_window</code> Close the currently selected window <code>\u2756 Super + \u21e7 Shift + Q</code> <code>quit_compostior</code> Exit the compositor <code>\u2756 Super + \u21e7 Shift + E</code> <code>select_workspace_[0-9]</code> Select the workspace between 0-9 <code>\u2756 Super + [0-9]</code> <code>select_workspace_[0-9]</code> Move the currently selected window to the workspace between 0-9 <code>\u2756 Super + \u21e7 Shift + [0-9]</code> <code>toggle_floating</code> Toggle whether or not the currently selected window is floating <code>\u2756 Super + Space</code> <code>toggle_pinned_to_workspace</code> Toggle whether a floating window is pinned outside of a workspace or not <code>\u2756 Super + \u21e7 Shift + P</code> <code>toggle_tabbing</code> Toggle whether or not the currently selected container is in a tabbed layout mode <code>\u2756 Super + W</code> <code>toggle_stacking</code> Toggle whether or not the currently selected container is in a stacking layout mode <code>\u2756 Super + S</code>"},{"location":"configuration/default_keybinds/#key","title":"Key","text":"<pre><code>default_action_overrides\n</code></pre>"},{"location":"configuration/default_keybinds/#value","title":"Value","text":"<p>A list of: </p> <pre><code># The name of the action that you want to override (taken from the list above)\n- name: string\n\n# The key action that will trigger the default action\n - action: \"up\" | \"down\" | \"repeat\" | \"modifiers\"\n\n# A list of modifiers that need to accompany the action for the command to happen\n- modifiers: Modifier[]\n\n# Name of the keycode that the action should respond to.\n# See https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h\n# for the list of available keycodes (e.g. KEY_ENTER, KEY_Z, etc.)\n- key: KeyCodeName\n</code></pre> <p>A <code>Modifier</code> is defined as one of the following names:</p> Name Description <code>primary</code> the key defined by the Action Key <code>alt</code> Any alt key <code>alt_left</code> The left alt key only <code>alt_right</code> The right alt key only <code>shift</code> Any shift key <code>shift_left</code> The left shift key only <code>shift_right</code> The right shift key only <code>ctrl</code> Any ctrl key <code>ctrl_left</code> The left ctrl key only <code>ctrl_right</code> The right ctrl key only <code>meta</code> The <code>super</code> or <code>windows</code> key <code>meta_left</code> The left <code>super</code> or <code>windows</code> key only <code>meta_right</code> The right <code>super</code> or <code>windows</code> key only <code>sym</code> The sym key <code>function</code> The <code>fn</code> key <code>caps_lock</code> The caps lock key <code>num_lock</code> The num lock key <code>scroll_lock</code> The scroll lock key"},{"location":"configuration/default_keybinds/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\ndefault_action_overrides:\n  - name: terminal        # Override the \"terminal\" keybind to execute with \"Ctrl + Shift + Enter\"\n    action: down\n    modifiers:\n      - ctrl\n      - shift\n    key: KEY_ENTER\n</code></pre>"},{"location":"configuration/display_configuration/","title":"Display Configuration","text":"<p>The display configuration is a distinct YAML file from the regular configuration. It is populated on the initial startup of <code>miracle</code> with a basic information for your particular monitor sitation if it does not yet exist.</p> <p>The most likely location is:</p> <pre><code>~/.config/miracle-wm/display.yaml.\n</code></pre> <p>Note</p> <p>See the arch user guide for information about <code>$XDG_CONFIG_HOME</code>.</p> <p>You may specify an alternative location by providing the commandline argument:</p> <pre><code>miracle-wm --display-config-path=/path/to/file\n</code></pre>"},{"location":"configuration/display_configuration/#configuration","title":"Configuration","text":"<p>The contents of the file describe a list of outputs. If the output is in the list, it is considered \"used\" and will have the provided attributes applied to it. An output is matched by its <code>name</code>. All attributes aside from the <code>name</code> are optional.</p> <pre><code>  outputs:\n    name: string      # the name of the output to match\n    enabled: boolean  # whether or not the output is used\n    primary: boolean  # whether or not the output is primary. If set true on multiple outputs, only the first one will be primary.\n    position:         # the XY position of the output\n      x: int\n      y: int\n    size:             # the size of the output, must match a resolution that the output supports, otherwise ignored\n      width: int\n      height: int\n    refresh: double   # the refresh rate of the output, must match a valid resolution that the output supports, otherwise ignored\n    orientation: normal | inverted | left | right\n    scale: float      # a scale factor for the whole output\n    group_id: int     # when non-zero, outputs with the same group_id will display the same content\n</code></pre>"},{"location":"configuration/display_configuration/#example","title":"Example","text":"<p>The following example is similar to something that might populate the default configuration. It tells the displays to be displayed side-by-side with their own content at normal orientations.</p> <pre><code># ~/.config/miracle-wm/display.yaml \noutputs:\n  - enabled: true\n    name: HDMI-A-1\n    position:\n      x: 0\n      y: 0\n    size:\n      width: 1920\n      height: 1290\n    refresh: 60\n    orientation: normal\n    scale: 1\n    group_id: 0\n  - enabled: true\n    name: HDMI-A-2\n    position:\n      x: 1280\n      y: 0\n    size:\n      width: 800\n      height: 600\n    refresh: 60\n    orientation: normal\n    scale: 1\n    group_id: 0\n</code></pre>"},{"location":"configuration/drag_and_drop/","title":"Drag and Drop","text":"<p>\"Drag and drop\" refers to functionality that enables users to drag containers within or between a tiling grid. If enabled, the user may hold down the modifier keys and the primary mouse button to begin dragging. The user then moves their pointer above other containers to drag the active container into that position. If the user releases the pointer, the container will snap to the desired location.</p>"},{"location":"configuration/drag_and_drop/#key","title":"Key","text":"<pre><code>drag_and_drop\n</code></pre>"},{"location":"configuration/drag_and_drop/#value","title":"Value","text":"<pre><code># When set to false, drag and drop is disabled entirely\nenabled: boolean\n\n# List of modifiers expected to be held when left clicking.\n# Defaults to the primary action key\nmodifiers: String[]\n</code></pre> <p>For a list of valid modifiers, see Action Key.</p>"},{"location":"configuration/drag_and_drop/#default","title":"Default","text":"<pre><code>drag_and_drop:\n  enabled: true\n  modifiers:\n    - primary\n    - shift\n</code></pre>"},{"location":"configuration/drag_and_drop/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\ndrag_and_drop:\n  enabled: true\n  modifiers:\n    - primary\n    - alt\n</code></pre>"},{"location":"configuration/enable_animations/","title":"Enable Animations","text":"<p>Globally enable or disable animations.</p>"},{"location":"configuration/enable_animations/#key","title":"Key","text":"<pre><code>enable_animations\n</code></pre>"},{"location":"configuration/enable_animations/#value","title":"Value","text":"<pre><code>boolean\n</code></pre>"},{"location":"configuration/enable_animations/#default","title":"Default","text":"<pre><code>true\n</code></pre>"},{"location":"configuration/enable_animations/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nenable_animations: false  # disable animations globally\n</code></pre>"},{"location":"configuration/environment_variables/","title":"Environment Variables","text":"<p>A list of environment variables that are set when the compositor starts.</p>"},{"location":"configuration/environment_variables/#key","title":"Key","text":"<pre><code>environment_variables\n</code></pre>"},{"location":"configuration/environment_variables/#value","title":"Value","text":"<p>A list of:</p> <pre><code>- key: string\n- value: any\n</code></pre>"},{"location":"configuration/environment_variables/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nenvironment_variables:\n  - key: mesa_glthread  # Setting mesa_glthread to false fixes some AMD issues\n    value: false\n</code></pre>"},{"location":"configuration/inner_gaps/","title":"Inner Gaps","text":"<p>Gaps between windows in pixels.</p>"},{"location":"configuration/inner_gaps/#key","title":"Key","text":"<pre><code>inner_gaps\n</code></pre>"},{"location":"configuration/inner_gaps/#value","title":"Value","text":"<p>A 2D integer point describing the gaps in pixels in the X and Y directions: <pre><code>x: int\ny: int\n</code></pre></p>"},{"location":"configuration/inner_gaps/#default","title":"Default","text":"<pre><code>x: 10\ny: 10\n</code></pre>"},{"location":"configuration/inner_gaps/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\ninner_gaps:\n    x: 50 # 50px between windows horizontally\n    y: 20 # 20px between windows vertically\n</code></pre>"},{"location":"configuration/introduction/","title":"Introduction","text":"<p>Miracle is configured via a <code>YAML</code> file. This section describes the settings that you may define in that file.</p>"},{"location":"configuration/introduction/#file-location","title":"File location","text":"<p>The configuration file will be written blank the first time that you start the compositor. The file is located at <code>$XDG_CONFIG_HOME/miracle-wm/config.yaml</code>. It is written on the initial startup of <code>miracle</code> if it does not yet exist. The most likely location is:</p> <pre><code>~/.config/miracle-wm/config.yaml.\n</code></pre> <p>Note</p> <p>See the arch user guide for information about <code>$XDG_CONFIG_HOME</code>.</p>"},{"location":"configuration/mir/","title":"Mir's Built-in Configuration","text":"<p>Please note that Mir's built-in configuration **is distinct from the configuration defined in the configuration section. The two may indeed overlap with one another. There is a task in miracle-wm to fix this.</p> <p>Mir provides a built-in configuration on top of the one that miracle-wm defines.</p>"},{"location":"configuration/mir/#location","title":"Location","text":"<p>This file can be found at:</p> <pre><code>.config/miracle-wm.config\n</code></pre> <p>or at <code>$XDG_CONFIG_HOME/miracle-wm.config</code> if <code>$XDG_CONFIG_HOME</code> is defined.</p>"},{"location":"configuration/mir/#format","title":"Format","text":"<p>This configuration is in a typical key-value pair format, i.e.:</p> <pre><code>key=value\n</code></pre> <p>The list of valid <code>key</code>s can be found by running:</p> <pre><code>miracle-wm --help\n</code></pre> <p>The keys are the names of the commandline arguments</p>"},{"location":"configuration/mir/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.config\n\nx11-window-title=miracle-wm\nidle-timeout=600\ndisplay-config=sidebyside\nadd-wayland-extensions=zwp_idle_inhibit_manager_v1:zwp_input_method_v1\n</code></pre>"},{"location":"configuration/move_modifier/","title":"Move Modifier","text":"<p>While the specified modifier is held and the user clicks the primary mouse button, they will be able to translate the container  under the pointer to the resulting position of the cursor. If this container belongs to a group of containers (e.g. a floating mini tree), then the entire tree will be translated. This command does not</p>"},{"location":"configuration/move_modifier/#key","title":"Key","text":"<pre><code>move_modifier\n</code></pre>"},{"location":"configuration/move_modifier/#value","title":"Value","text":"<pre><code>String[]\n</code></pre> <p>For a list of valid modifiers, see Action Key.</p>"},{"location":"configuration/move_modifier/#default","title":"Default","text":"<pre><code>move_modifier:\n  - primary\n</code></pre>"},{"location":"configuration/move_modifier/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nmove_modifier:\n  - primary\n  - shift\n</code></pre>"},{"location":"configuration/outer_gaps/","title":"Outer Gaps","text":"<p>Gaps between the window tiles and the edge of the screen.</p>"},{"location":"configuration/outer_gaps/#key","title":"Key","text":"<pre><code>outer_gaps\n</code></pre>"},{"location":"configuration/outer_gaps/#value","title":"Value","text":"<p>A 2D integer point describing the gaps in pixels in the X and Y directions: <pre><code>x: int\ny: int\n</code></pre></p>"},{"location":"configuration/outer_gaps/#default","title":"Default","text":"<pre><code>x: 10\ny: 10\n</code></pre>"},{"location":"configuration/outer_gaps/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nouter_gaps:\n    x: 50  # 50px between the tiling grid and the edge of the output, horizontally\n    y: 100 # 100px between the tiling grid and the edge of the output, vertically \n</code></pre>"},{"location":"configuration/resize_jump/","title":"Resize Jump","text":"<p>Defines the number of pixels that a window will be resized by for each resize request. This value affects any direction (up, down, left, or right).</p>"},{"location":"configuration/resize_jump/#key","title":"Key","text":"<pre><code>resize_jump\n</code></pre>"},{"location":"configuration/resize_jump/#value","title":"Value","text":"<p>An integer describing the number of pixels</p>"},{"location":"configuration/resize_jump/#default","title":"Default","text":"<pre><code>50\n</code></pre>"},{"location":"configuration/resize_jump/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nresize_jump: 25 # Each resize will now add or remove 25px from the current window size\n</code></pre>"},{"location":"configuration/startup_apps/","title":"Startup Apps","text":"<p>A list of applications that will be started when the compositor starts.</p>"},{"location":"configuration/startup_apps/#key","title":"Key","text":"<pre><code>startup_apps\n</code></pre>"},{"location":"configuration/startup_apps/#value","title":"Value","text":"<p>A list of:</p> <pre><code>- command: string  # A shell command to be executed\n\n# If true, the application will automatically restart\n- restart_on_death: bool\n\n# If true, the application will be started with \"systemd-run --user --property Restart=on-failure &lt;COMMAND&gt;\"\n- in_systemd_scope: bool\n</code></pre>"},{"location":"configuration/startup_apps/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\n# Start waybar and swaybg on startup\nstartup_apps:\n  - command: waybar\n    restart_on_death: true\n  - command: swaybg -i /path/to/my/image\n    restart_on_death: true\n    in_systemd_scope: true\n</code></pre>"},{"location":"configuration/terminal/","title":"Terminal","text":"<p>Select which terminal will be opened by the <code>terminal</code> keybind (See Default Keybinds).</p>"},{"location":"configuration/terminal/#key","title":"Key","text":"<pre><code>terminal\n</code></pre>"},{"location":"configuration/terminal/#value","title":"Value","text":"<p>A string defining the terminal shell command</p>"},{"location":"configuration/terminal/#default","title":"Default","text":"<pre><code>miracle-mw-sensible-terminal\n</code></pre>"},{"location":"configuration/terminal/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nterminal: konsole # Set konsole as the default terminal\n</code></pre>"},{"location":"configuration/workspaces/","title":"Workspaces","text":"<p>Customize the behavior of a particular workspace number.</p>"},{"location":"configuration/workspaces/#key","title":"Key","text":"<pre><code>workspaces\n</code></pre>"},{"location":"configuration/workspaces/#value","title":"Value","text":"<p>A list of:</p> <pre><code>number: int  # Unique que of the workspace [0-9]\nlayout: tiled, floating  # Default layout style for this workspace\n</code></pre>"},{"location":"configuration/workspaces/#default","title":"Default","text":"<pre><code>workspaces:\n    - number: 0\n      layout: tiled\n    - number: 1\n      layout: tiled\n    - number: 2\n      layout: tiled\n    - number: 3\n      layout: tiled\n    - number: 4\n      layout: tiled\n    - number: 5\n      layout: tiled\n    - number: 6\n      layout: tiled\n    - number: 7\n      layout: tiled\n    - number: 8\n      layout: tiled\n    - number: 9\n      layout: tiled\n</code></pre>"},{"location":"configuration/workspaces/#example","title":"Example","text":"<pre><code># ~/.config/miracle-wm.yaml\n\nworkspaces:\n    - number: 1\n      layout: floating  # Override the default layout style to floating\n</code></pre>"},{"location":"getting_started/building/","title":"Building","text":""},{"location":"getting_started/building/#dependencies","title":"Dependencies","text":"<ul> <li>cmake &gt;= 3.7</li> <li>gcc or clang with C++23 support</li> <li>miral &gt;= 7</li> <li>mirrenderer</li> <li>mirwayland</li> <li>mirserver</li> <li>mirserver-internal</li> <li>mir-graphics-drivers-desktop &gt;= 2.14</li> <li>mir-graphics-drivers-nvidia &gt;= 2.14 (NVIDIA Only)</li> <li>glib-2.0</li> <li>yaml-cpp</li> <li>libevdev</li> <li>nlohmann json &gt;= 3.2.0</li> <li>libnotify</li> <li>libxkbcommon</li> <li>libgles2-mesa-dev</li> <li>json-c &gt;= 0.17</li> <li>dbus-next</li> <li>tenacity</li> </ul>"},{"location":"getting_started/building/#from-source","title":"From source","text":"<pre><code>git clone https://github.com/miracle-window-manager/miracle-wm.git\ncd miracle-wm\n\ncmake -Bbuild\ncmake --build build\nWAYLAND_DISPLAY=wayland-98 ./build/miracle-wm\n</code></pre>"},{"location":"getting_started/building/#cmake-options","title":"CMake Options","text":"<p>The following options are available at build time:</p> <ul> <li><code>-DSNAP_BUILD</code>: Informs cmake that this is being built for a snap   since some parameters need to be tweaked for that use case.</li> <li><code>-DSYSTEMD_INTEGRATION</code>: If enabled, miracle will build with full   systemd integration, including establishing a user session and   importing the proper environment variables in to systemd.</li> <li><code>-DEND_TO_END_TESTS</code>: If enabled, miracle's end-to-end tests will   be compiled as part of the test suite.</li> </ul>"},{"location":"getting_started/building/#snap","title":"Snap","text":"<pre><code>cd miracle-wm\nsnapcraft\nsudo snap install --dangerous --classic miracle-wm_*.snap\n</code></pre>"},{"location":"getting_started/installation/","title":"Installation","text":""},{"location":"getting_started/installation/#install","title":"Install","text":"SnapFedoraUbuntu (mantic and noble)Arch Linux (AUR)Nightly <pre><code>sudo snap install miracle-wm --classic\n</code></pre> <pre><code>sudo dnf install miracle-wm\n</code></pre> <pre><code>sudo add-apt-repository ppa:matthew-kosarek/miracle-wm\nsudo apt update\nsudo apt install miracle-wm\n</code></pre> <pre><code>https://aur.archlinux.org/packages/miracle-wm\n</code></pre> <pre><code>sudo snap install miracle-wm --classic --edge\n</code></pre>"},{"location":"getting_started/installation/#running","title":"Running","text":""},{"location":"getting_started/installation/#on-login","title":"On login","text":"<p>Once installed, you may select the \"Miracle\" option from your display manager before you login (e.g. <code>gdm</code> or <code>lightdm</code>). In most environments, this presents itself as a little \"settings\" button after you select your name.</p> <p>Note that if you installed the snap, the option may read \"Miracle (snap)\" to distinguish it from the binary version.</p>"},{"location":"getting_started/installation/#hosted","title":"Hosted","text":"<p>To run the window manager as a window on your current desktop session, simply run:</p> <pre><code>WAYLAND_DISPLAY=wayland-98 miracle-wm\n</code></pre> <p>Note that this is only useful if you want to test-drive the window manager or do some development on it for yourself.</p>"},{"location":"getting_started/logs/","title":"Logs","text":"<p>The default <code>.desktop</code> file that is shipped with miracle-wm (most likely at <code>/usr/share/wayland-sessions/miracle-wm.desktop</code>) will run <code>miracle-wm</code> with <code>systemd-cat</code>. If you are running miracle from your login manager (such as <code>gdm</code> or <code>lightdm</code>), then your logs will most likely be piped to <code>journald</code>. You may access them via:</p> <pre><code>journalctl -t miracle-wm\n</code></pre>"},{"location":"getting_started/what_is_a_wayland_compositor/","title":"What is a Wayland compositor?","text":"<p>This document is intended for users who are unfamiliar with compositors, Wayland, or Linux in general. It serves as a high-level introduction to the ecosystem in which this project exists.</p> <p>To understand <code>miracle-wm</code>, we will need to develop our understanding of the Linux graphics stack. In doing so, we'll explore everything from the application layer to the kernel so that we can understand the flow of visual graphics to your computer monitor.</p>"},{"location":"getting_started/what_is_a_wayland_compositor/#key-takeways","title":"Key Takeways \ud83d\udd11","text":"<ul> <li>Applications are written with the help pf GUI Toolkits, which abstract away common problems (e.g. text rendering, widgets, scale, keyboard &amp; mouse input, etc)</li> <li>Applications talk to a window manager using the Wayland protocol<ul> <li>GUI toolkits implement the client side of this protocol</li> </ul> </li> <li>Wayland protocols are specified in XML files and do not necessarily have support across different systems</li> <li>Wayland is the succesor to the X11 protocol</li> <li>Window managers implement the Wayland protocol</li> <li>Window managers rely on DRM/KMS, GBM, and EGLStreams (only Nvidia) for graphics buffer and display management</li> <li>Window managers rely on libinput for processing input and routing it to the proper windows</li> <li>Mir is the C++ library for writing Wayland compositors that <code>miracle-wm</code> uses</li> </ul>"},{"location":"getting_started/what_is_a_wayland_compositor/#how-do-desktop-applications-work-on-linux","title":"How do desktop applications work on Linux?","text":"<p>Imagine that we would like to build a \"Todo list\" desktop application for computers that are running the Linux operating system. We might want to build our application with the following features:</p> <ul> <li>A window on the user's desktop</li> <li>A button in this window to add a new item</li> <li>A modal that popus up when you click the \"new item\" button<ul> <li>This modal might contain a text input for entering the description of the todo item</li> </ul> </li> <li>A list of added todo items, with each item containing:<ul> <li>Text describing the item</li> <li>A checkbox describing the \"done\" state of the item</li> <li>A button to delete the item</li> </ul> </li> <li>And so on...</li> </ul> <p>While this application seems simple, we quickly see that there a number of complicated UI widgets and interactions here (e.g. buttons, modals, dynamic lists, text, etc.). On top of that, we might want to have our application translated into a number of different languges, which means that we'll have to render proper fonts for all different types of languages (including left-to-right and right-to-left written languages). Managing all of this is a very difficult problem, especially when you just want to build your todo app.</p> <p>This is where GUI tookits come into play. These toolkits handle the problems of rendering, widgets, animations, localization, mouse input, keyboard input, and much more. When we build our app on top of a toolkit, these common functionalities are given to us for free.</p> <p>Note</p> <p>Some of the toolkits on Linux that you may be familiar with are GTK, QT, Flutter, and Electron. There are many other toolkits, as well, but these ones are particularly popular.</p>"},{"location":"getting_started/what_is_a_wayland_compositor/#how-do-gui-toolkits-work","title":"How do GUI toolkits work?","text":"<p>If you look around the screen that you're reading this webpage on, you probably see a number of other applications in addition to your web browser. You might see a top panel displaying the date and time. You might see a dock displaying icons of the applications that you can open. You might see your favorite text editor like Visual Studio Code open. You might even see a todo app! Each of these application wants to render to the screen, receive mouse and keyboard input, and more. </p> <p>Linux orchestrates visual applications with the help of a window manager (a.k.a a display server or compositor). This is a single process that starts as soon as you log into your user account. Each application on your desktop tells the window manager that it wants to render something to the screen. The window manager is then responsible for combining the images submitted by each application into one final image that is sent off to your screen.</p> <p>The communication protocol used between applications and the window manager is called Wayland. You may think of Wayland in the same way that you think of HTTP. Clients (applications) ask the Server (window manager) to perform some action (e.g. show something on the screen, become fullscreen, etc.). The window manager then has the authority to either accept or deny that request.</p> <p>Among the responsibilities of the window manager are:</p> <ul> <li>Placing each application in an appropriate position on the screen(s)</li> <li>Stitching together the images displayed by each application and sending the final image off to the screen(s)</li> <li>Routing keyboard, mouse, stylus and any other inputs to the proper application (e.g. the currently focused application)</li> <li>Maximizing and minimizing applications</li> <li>Dragging applications around on the screen</li> <li>Switching workspaces</li> <li>Alt-tabbing</li> <li>Exposing onscreen keyboards</li> <li>Handling session locking</li> <li>And much, much more</li> </ul> <p>Note</p> <p>You are probably most familiar with \"floating\" window managers. These window managers are typical of a baseline \"Windows 10\" user experience. However, this is not the only way to manage your windows! For example, <code>miracle-wm</code> is a tiling window manager, meaning that it treats windows as individual tiles instead of surfaces that are floating in a pool.</p> <p>GUI toolkits abstract the Wayland protocol away from application developers so that they don't have to worry about the details of Waylalnd. Given that the protocol itself is quite complicated, it is a good thing that they do this. You as an application developer can choose to not use a GUI toolkit and implement the client-side of the Wayland protocol yourself, but this would be incredibly time-consuming. On top of that, you would have to implement all of these previously mentioned aspecs of a GUI toolkit (e.g. widgets, input, animations, text rendering etc.). Needless to say, unless you plan to make it your full-time job (or you're a dedicated hobbyist!) it probably isn't worth your time.</p>"},{"location":"getting_started/what_is_a_wayland_compositor/#how-does-wayland-work","title":"How does wayland work?","text":"<p>The Wayland protocol is specified via XML files. While there exists only a single necessary Wayland protocol (known as wayland.xml), window managers are free to implement as many optional protocol extensions as they see fit for their use case. Each protocol provides some new functionality like screencopy, on-screen keyboard support, viewporter for surface cropping and scaling, and many more. The list of possible protocols is theoretically as infinite, as window manager developers are free to implement any that they deem appropriate. As an example, KDE defines a number of protocols that are specific to their desktop environment.</p> <p>While window managers can theoretically support any protocols that they like, a protocol will only see use if there are clients for that protocol. As a result, there is a somewhat \"official\" list of protocols that are maintained by freedesktop.org, which you can find at https://gitlab.freedesktop.org/wayland/wayland-protocols. To get a protocol accepted into this repository, there needs to be widespread consensus among popular Wayland compositors that the protocol is the right solution. Once the protocol gets accepted, each compositor must implement the protocol themselves.</p> <p>If you'd like to get an overview of Wayland protocols that have been implemented in some system, check out https://wayland.app/protocols/.</p> <p>Warning</p> <p>Wayland protocols are loosely defined. This means that different compositors may implement the same protocol in different ways. Oftentimes, the behavior converges to \"whatever GNOME does\" or \"whatever KDE does\" instead of something well-defined in the specification. On top of that, the protocols often fail to define how their protocol should interact with another protocol, which leaves compositor-implementers to fill in the blanks on their own. This is just a warning in case you encounter slightly different behaviors in different environments.</p>"},{"location":"getting_started/what_is_a_wayland_compositor/#the-history-of-wayland","title":"The history of Wayland","text":"<p>Unfortunately, it doesn't feel right to tell you about Wayland if I don't also provide a quick aside to inform you about its predecessor: X11. I won't get into the nitty-gritty details here (especially since I was never an X11 developer) but I will explain enough to clear up some confusion. </p> <p>For most of its history, Linux applications used the X11 (or simply X) protocol to handle window management. The X ecosystem is much different compared to the Wayland, and I'm afraid it has led to a bit of confusion among people trying to understand Linux GUI applications for the first time. For starters, there existed only one true implementation of an X11 server on Linux. This was known as the X.Org Server. All Linux distributions ran a similar X.Org server underneath the hood. This was known as the \"compositor\" because it was responsible for \"compositing\" the final image and sending it off to the displays. The \"compositor\" was only responsible for compositing however. A separate process usually existed to facilitate the window management aspects of the compositors, which was fittingly called the window manager. By \"window management aspects\", I am refering to features such as:</p> <ul> <li>Placing new windows</li> <li>Allowing windows to be dragged around (or not)</li> <li>Moving windows based off keyboard input</li> <li>Fullscreening windows</li> <li>etc.</li> </ul> <p>Hence, if you ever installed the i3 window manager (as an example), you were installing a window manager while the X.Org server remained your compositor. This is why you will see the terms \"window manager\" and \"compositor\" used interchangeably when descibing a Wayland window manager. In the Wayland world, these are no longer two distinct processes like there were in the X days.</p> <p>Fast forward to some time in the early 2010s, the X.Org developers finally had enough of X11. The entire ecosystem had a lot of cruft and a lot of hacks. On top of that, X11 failed terribly in terms of security. The X developers figured that it would be much easier to redesign a new protocol from the ground-up. That is when Wayland was born! Unlike X11 whose only real implementation was the X.Org server, Wayland was designed to just be a set of protocol definitions. This means that anyone can write their own Wayland server so long as they implement the protocols correctly.</p> <p>That is as deep as I will go into the history of Wayland. It is obviously much deeper than this and I wasn't around during that time so I can't speak to the specifics. If you ever want to seek out an ex-X11 developer at an XDC conference, I'm sure that they have many horror stories to tell you.</p> <p>Let's get back to the graphics stack now!</p>"},{"location":"getting_started/what_is_a_wayland_compositor/#how-do-window-managers-or-compositors-work","title":"How do window managers (or \"compositors\") work?","text":"<p>I will now give a brief introduction into how \"window managers\" work. However, the details of such a complex piece of software would take a novel to describe accurately, so it should suffice to provide a high-level overview of what a window manager does.</p> <p>Most importantly, window managers (or \"compositors\") implement the server side of the Wayland protocol. The window manager can choose to implement any number of Wayland protocols that it likes, but it must at the very least implement the \"core\" Wayland protocol. Clients connect to the Wayland server via a wayland socket (which you may be able to read by running <code>echo $WAYLAND_DISPLAY</code> in you terminal).</p> <p>This window manager process is most likely started by your login manager via <code>systemd</code> when you log in, although you may start it manually from a TTY by yoursef. This process has special access to the hardware resources of your system through the <code>DRM/KMS</code> subsystem that the kernel exposes. This subsystem exposes an API that allows the window manager to accomplish some of its primary tasks, such as:</p> <ul> <li>Setting the output dimensions and refresh rates of your monitors</li> <li>Managing graphics buffers</li> </ul> <p>Graphics buffers are typically allocated with the help of the Generic Buffer Management (GBM) API. This API is part of Mesa's interface. Mesa is an open-source implementation of OpenGL. At the time of writing this document, Nvidia provides an EGLStreams API for allocating buffers on its GPUs in place of the GBM API. The job of the window manager is to accept the buffers submitted by its various clients, render them all into a buffer per-output, and submit each buffer to the corresponding output.</p> <p>On top of managing the display, the window manager is also responsible for processing input and routing it to the correct clients. The window manager does this with the help of libinput which is another project run by freedesktop.org. This API monitors input events from the kernel (e.g. mouse clicks, keyboard input, stylus input, etc.) and sends the events off to the window manager so that it can do something with them. Most likely the window manager will route these events to a client, but the window manager may also use this input to execute some custom behavior, like a global keyboard shortcut.</p> <p>While the window managers core responsibility is to show buffers on screen and manage input, it also can potentially do a lot more things, many of which are tangentially related to its core responsibility. This might include clipboard management, screen casting, global keybinds, and much more. All of this is up to the window manager developer.</p> <p>With all of this being said, you might think that developing a Wayland window manager from scratch is a daunting task. And you would be correct to think this! Luckily, other people have thought the same thing, which is why some projects have arisen to handle the commonalities of window manager development for you. Two prominent examples of such libraries are:</p> <ul> <li>Mir: a C++ library for writing Wayland compositors that is maintained by Canonical</li> <li>wlroots: a C library for writing Wayland compositors</li> </ul>"},{"location":"ipc/","title":"Introduction","text":"<p>Miracle provides an IPC mechanism for interacting with the compositor at runtime. This socket is largely in line with both i3 and  sway's IPC implementation.</p> <p>The IPC protocol uses a UNIX socket as the method of communication. The path to the socket  is stored in the environment variable <code>MIRACLESOCK</code>  and, for backwards compatibility with sway, SWAYSOCK,  and, for backwards compatibility with i3, I3SOCK.</p>"},{"location":"ipc/#format","title":"Format","text":"<p>The format for messages and replies is:</p> <pre><code>    &lt;magic-string&gt; &lt;payload-length&gt; &lt;payload-type&gt; &lt;payload&gt;\n\nWhere\n    &lt;magic-string&gt; is i3-ipc, for compatibility with i3\n    &lt;payload-length&gt; is a 32-bit integer in native byte order\n    &lt;payload-type&gt; is a 32-bit integer in native byte order\n</code></pre> <p>For example, sending the exit command would look like the following hexdump:</p> <pre><code>00000000 | 69 33 2d 69 70 63 04 00 00 00 00 00 00 00 65 78 |i3-ipc........ex|\n00000010 | 69 74                                           |it              |\n</code></pre> <p>The payload for replies will be a valid serialized JSON data structure.</p>"},{"location":"ipc/#messages","title":"Messages","text":"<p>Each message is associated with a \"Message Type\" that is given by the number in parentheses. This is the value that users will send from the client when they want to send the corresponding message.</p> <ul> <li>RUN_COMMAND (0)</li> <li>GET_WORKSPACES (1)</li> <li>SUBSCRIBE (2)</li> <li>GET_OUTPUTS (3)</li> <li>GET_TREE (4)</li> <li>GET_MARKS (5)</li> <li>GET_VERSION (7)</li> <li>GET_BINDING_MODES (8)</li> <li>SEND_TICK (10)</li> <li>SYNC (11)</li> <li>GET_BINDING_STATE (12)</li> </ul> <p>For those familiar with sway, miracle will always lack support for particular messages such as:</p> <ul> <li><code>GET_CONFIG</code></li> <li><code>GET_BAR_CONFIG</code></li> </ul> <p>The following are unimplemented, but may be implemented in the future:</p> <ul> <li><code>GET_INPUTS</code></li> <li><code>GET_SEATS</code></li> </ul>"},{"location":"ipc/#events","title":"Events","text":"<ul> <li>workspace (0x80000000)</li> <li>output (0x80000001)</li> <li>window (0x80000003)</li> <li>binding (0x80000005)</li> <li>tick (0x80000007)</li> </ul>"},{"location":"ipc/#commands","title":"Commands","text":"<ul> <li>layout</li> <li>mark</li> <li>resize</li> <li>swap</li> <li>sticky</li> <li>workspace</li> <li>rename</li> <li>gaps</li> </ul>"},{"location":"ipc/get_binding_modes/","title":"GET_BINDING_MODES (8)","text":"<p>Retrieves a list of valid binding modes. The \"default\" binding mode is always in the list.</p>"},{"location":"ipc/get_binding_modes/#payload","title":"Payload","text":"<p>Empty</p>"},{"location":"ipc/get_binding_modes/#reply","title":"Reply","text":"<pre><code>[\n    string\n]\n</code></pre>"},{"location":"ipc/get_binding_modes/#example","title":"Example","text":"<pre><code>[\n    \"default\",\n    \"resize\",\n    \"selecting\",\n    \"dragging\",\n    \"moving\"\n]\n</code></pre>"},{"location":"ipc/get_binding_state/","title":"GET_BINDING_STATE (12)","text":"<p>Request  the  current  binding state, e.g. the currently active binding mode name. This state is guaranted to be in the list returned by GET_BINDING_MODES</p>"},{"location":"ipc/get_binding_state/#type-number","title":"Type Number","text":"<p>12</p>"},{"location":"ipc/get_binding_state/#payload","title":"Payload","text":"<p>None</p>"},{"location":"ipc/get_binding_state/#reply","title":"Reply","text":"<pre><code>{\n    \"name\": string // Name of the mode\n}\n</code></pre>"},{"location":"ipc/get_binding_state/#example","title":"Example","text":"<pre><code>{\n    \"name\": \"default\"\n}\n</code></pre>"},{"location":"ipc/get_marks/","title":"GET_MARKS (5)","text":"<p>Retrieves the list of unique marks. While a mark can be applied to more than one container, this list will only contain a sincle instance of the mark.</p>"},{"location":"ipc/get_marks/#payload","title":"Payload","text":"<p>Empty</p>"},{"location":"ipc/get_marks/#reply","title":"Reply","text":"<p>The reply is a list of strings:</p> <pre><code>string[]\n</code></pre>"},{"location":"ipc/get_marks/#example","title":"Example","text":"<pre><code>[\n    \"editor\",\n    \"browser\"\n]\n</code></pre>"},{"location":"ipc/get_outputs/","title":"GET_OUTPUTS (3)","text":"<p>Retrieves the list of outputs.</p>"},{"location":"ipc/get_outputs/#payload","title":"Payload","text":"<p>Empty</p>"},{"location":"ipc/get_outputs/#reply","title":"Reply","text":"<p>The reply is an array of objects corresponding to the following schema:</p> <pre><code>[\n    {\n        \"name\": string, // Name of the output\n        \"make\": string, // Make of the output\n        \"model\": string, // Model of the output\n        \"serial\": string, // The outputs serial number as a hexadecimal string\n        \"active\": boolean, // Whether or not this output is used\n        \"dpms\": boolean, // Deprecated. True if the output is on, otherwise false\n        \"power\": boolean, // True if the output is on, otherwise false\n        \"primary\": boolean, // True if output is the primary output, otherwise false\n        \"scale\": float, // Scale of the output, or -1 if not used\n        \"subpixel_hinting\": rgb | bgr | vrgb | vbgr | none, // The current subpixel hinting in use on the output\n        \"transform\": normal | 90 | 180 | 270 | flipped-90 | flipped-180 | flipped-270, // The transform of the output\n        \"current_workspace\": string, // The name of the current workspace on the output, or null for disabled outputs\n        \"modes\": {  // An array of the supported modes on this output\n            \"width\": integer,\n            \"height\": integer,\n            \"refresh\": double\n        }[],\n        \"current_mode\": { // The current mode of the output\n            \"width\": integer,\n            \"height\": integer,\n            \"refresh\": double\n        },\n        \"rect\": { // The bounds of the output\n            \"x\": integer,\n            \"y\": integer,\n            \"width\": integer,\n            \"height\": integer\n        }\n    }\n]\n</code></pre>"},{"location":"ipc/get_outputs/#example","title":"Example","text":"<pre><code>[\n    {\n        \"name\": \"HDMI-A-2\",\n        \"make\": \"Unknown\",\n        \"model\": \"NS-19E310A13\",\n        \"serial\": \"0x00000001\",\n        \"active\": true,\n        \"primary\": false,\n        \"scale\": 1.0,\n        \"subpixel_hinting\": \"rgb\",\n        \"transform\": \"normal\",\n        \"current_workspace\": \"1\",\n        \"modes\": [\n            {\n                \"width\": 640,\n                \"height\": 480,\n                \"refresh\": 59940\n            },\n            {\n                \"width\": 800,\n                \"height\": 600,\n                \"refresh\": 60317\n            },\n            {\n                \"width\": 1024,\n                \"height\": 768,\n                \"refresh\": 60004\n            },\n            {\n                \"width\": 1920,\n                \"height\": 1080,\n                \"refresh\": 60000\n            }\n        ],\n        \"current_mode\": {\n            \"width\": 1920,\n            \"height\": 1080,\n            \"refresh\": 60000\n        }\n    }\n]\n</code></pre>"},{"location":"ipc/get_tree/","title":"GET_TREE (4)","text":""},{"location":"ipc/get_version/","title":"GET_VERSION (7)","text":"<p>Retrieves information about the version of miracle that is running.</p>"},{"location":"ipc/get_version/#payload","title":"Payload","text":"<p>Empty</p>"},{"location":"ipc/get_version/#reply","title":"Reply","text":"<pre><code>{\n    \"major\": integer, // The major version\n    \"minor\": integer, // The minor version\n    \"patch\": integer, // The patch version\n    \"human_readable\": string, // A readable version string\n    \"loaded_config_file_name\": string, // Full path to the configuration file\n}\n</code></pre>"},{"location":"ipc/get_version/#example","title":"Example","text":"<pre><code>{\n    \"major\": 0,\n    \"minor\": 5,\n    \"patch\": 2,\n    \"human_readable\": \"0.5.2\",\n    \"loaded_config_file_name\": \"/home/mattkae/.config/miracle-wm/config.yaml\"\n}\n</code></pre>"},{"location":"ipc/get_workspaces/","title":"GET_WORKSPACES (1)","text":"<p>Retrieves the list of workspaces.</p>"},{"location":"ipc/get_workspaces/#payload","title":"Payload","text":"<p>Empty</p>"},{"location":"ipc/get_workspaces/#reply","title":"Reply","text":"<p>The reply is an array of objects corresponding to the following schema:</p> <pre><code>[\n    {\n        \"num\": integer,     // The workspace number, or -1 for workspaces without a number\n        \"name\": string,     // The name of the workspace\n        \"visible\": boolean, // True if the workspace is currently visible on an output, otherwise false\n        \"focused\": boolean, // True if the workspace is visible and its output is currently selected\n        \"urgent\": boolean,  // Legacy, awlways false\n        \"output\" string,    // Name of the output that the workspace is on\n        \"rect\": {           // The rectangle defining this workspace\n            \"x\" integer,\n            \"y\": integer,\n            \"width\": integer,\n            \"height\": integer\n        }\n    }\n]\n</code></pre>"},{"location":"ipc/get_workspaces/#example","title":"Example","text":"<pre><code>[\n    {\n        \"num\": 1,\n        \"name\": \"1\",\n        \"visible\": true,\n        \"focused\": true,\n        \"output\": \"eDP-1\",\n        \"rect\": {\n            \"x\": 0,\n            \"y\": 23,\n            \"width\": 1920,\n            \"height\": 1057\n        },\n    }\n]\n</code></pre>"},{"location":"ipc/run_command/","title":"RUN_COMMAND (0)","text":""},{"location":"ipc/run_command/#payload","title":"Payload","text":"<p>A string representing a command(s) to run.</p>"},{"location":"ipc/run_command/#reply","title":"Reply","text":"<p>A list of objects each corresponding to the success of an individual command:</p> <pre><code>[\n    {\n        \"success\": boolean,\n        \"parse_error\": boolean?, // True if the command failed at parse time, most likely due to an unknown command\n        \"error\": string? // Human-readable error message\n    }\n]\n</code></pre> <p><code>parse_error</code> and <code>error</code> will be omitted when <code>success</code> is true.</p>"},{"location":"ipc/run_command/#example","title":"Example","text":"<p>For example, if a user sends a <code>RUN_COMMAND</code> with the following payload:</p> <pre><code>resize grow width 10; meow 5\n</code></pre> <p>then they should see a reply that looks like this:</p> <pre><code>[\n    {\n        \"success\": true\n    },\n    {\n        \"success\": false,\n        \"parse_error\": true,\n        \"error\": \"Unsupported command type: meow\"\n    }\n]\n</code></pre>"},{"location":"ipc/send_tick/","title":"SENT_TICK (10)","text":"<p>Issues a TICK event to all clients that are subscribed to tick events. This may be used to ensure that all events prior to the tick are received.</p>"},{"location":"ipc/send_tick/#payload","title":"Payload","text":"<p>Users may provide an optional JSON payload. This payload will be provided back to the listeners of the tick event.</p>"},{"location":"ipc/send_tick/#reply","title":"Reply","text":"<pre><code>{\n    \"success\": boolean\n}\n</code></pre>"},{"location":"ipc/send_tick/#example","title":"Example","text":"<pre><code>{\n    \"success\": true\n}\n</code></pre>"},{"location":"ipc/subscribe/","title":"SUBSCRIBE (2)","text":"<p>Subscribe this IPC connection to the event types specified in the message payload.</p>"},{"location":"ipc/subscribe/#payload","title":"Payload","text":"<p>An array of events names. Events are specified according to the following table:</p> Value Name Description 0x80000000 workspace sent whenever an event involving a workspace occurs such as creation, focus gain, or removal 0x80000001 output sent whenever an event involving an output occurs 0x80000002 mode sent whenever the mode changes 0x80000003 window sent whenever an event involving a window occurs such as creation, focus gain, or removal 0x80000006 shutdown sent when the compositor is about to shutdown 0x80000007 tick sent when an ipc client sends a SEND_TICK message 0x80000015 input sent when something related to input changes"},{"location":"ipc/subscribe/#example","title":"Example","text":"<pre><code>[ \"workspace\", \"mode\" ]\n</code></pre>"},{"location":"ipc/subscribe/#reply","title":"Reply","text":"<pre><code>{\n    \"success\": boolean,\n    \"error\" string?\n}\n</code></pre>"},{"location":"ipc/subscribe/#example_1","title":"Example","text":"<pre><code>{\n    \"success\": true\n}\n</code></pre>"},{"location":"ipc/sync/","title":"SYNC (11)","text":"<p>Like sway, this this command will just return a failure object since it does not make sense to implement in sway due to the X11 nature of the command. If you  are curious about what this IPC command  does  in  i3, refer to the i3 documentation.</p>"},{"location":"ipc/sync/#payload","title":"Payload","text":"<p>None</p>"},{"location":"ipc/sync/#reply","title":"Reply","text":"<pre><code>{\n    \"name\": \"default\"\n}\n</code></pre>"},{"location":"ipc/commands/gaps/","title":"gaps","text":"<p>Introduce in v0.7.0, the <code>gaps</code> command allows users to change both the inner and out caps either globally or per-workspace.</p>"},{"location":"ipc/commands/gaps/#syntax","title":"Syntax","text":"<pre><code># Inner gaps: space between two adjacent windows (or split containers).\ngaps inner current|all set|plus|minus &lt;gap_size_in_px&gt;\n# Outer gaps: space along the screen edges.\ngaps outer|horizontal|vertical|top|right|bottom|left current|all set|plus|minus &lt;gap_size_in_px&gt;\n</code></pre>"},{"location":"ipc/commands/gaps/#example","title":"Example","text":"<pre><code>miraclemsg gaps outer all set 100 # Set outer gaps on all workspaces to 100px\nmiraclemsg gaps inner current set 10 # Set inner gaps on the current workspace to 10px\n</code></pre>"},{"location":"ipc/commands/gaps/#links","title":"Links","text":"<ul> <li>i3 documentation</li> </ul>"},{"location":"ipc/commands/layout/","title":"layout","text":"<p>Introduced in v0.4.0, the <code>layout</code> command allows users to to change the layout of the currently selected container.</p>"},{"location":"ipc/commands/layout/#example","title":"Example","text":"<pre><code>miraclemsg \"layout splitv\"  # Set the layout to 'vertical'\nmiraclemsg \"layout splith\"  # Set the layout to 'horizontal'\nmiraclemsg \"layout toggle split\"  # Set the layout to 'vertical' if 'horizontal' and vice versa\nmiraclemsg \"layout toggle tabbed splith splitv\"  # Cycle through the layouts in the list\n</code></pre>"},{"location":"ipc/commands/layout/#links","title":"Links","text":"<ul> <li>i3 documentation</li> </ul>"},{"location":"ipc/commands/mark/","title":"mark","text":"<p>A <code>mark</code> is a convenient way to tag a container such that you can easily reference it later. A window is marked using the <code>mark</code> command and unmarked using the <code>unmark</code> command. Specifying <code>unmark</code> with no identifier removes all marks from the specified containers. Marks do not need to be unique, meaning that multiple containers can share a mark.</p> <p>When marking, you can specify a number of options:</p> <ol> <li>the <code>--toggle</code> option will remove the mark if it already exists for that container, otherwise add it</li> <li>the <code>--add</code> option will add the mark in addition to existing marks</li> <li>the <code>--replace</code> option will remove all existing marks and replace them with the specified mark</li> </ol>"},{"location":"ipc/commands/mark/#syntax","title":"Syntax","text":"<pre><code>mark [--add|--replace] [--toggle] &lt;identifier&gt;\n[con_mark=\"identifier\"] focus\nunmark &lt;identifier&gt;\n</code></pre>"},{"location":"ipc/commands/mark/#example","title":"Example","text":"<pre><code>miraclemsg mark hi # Marks the focused container as 'hi'\nunmark             # Removes all marks from the focused container\n</code></pre>"},{"location":"ipc/commands/rename/","title":"rename","text":"<p>The <code>rename</code> command lets you rename a workspace. If you try to rename a workspace to a name or number that is already taken, the rename will be ignored.</p>"},{"location":"ipc/commands/rename/#syntax","title":"Syntax","text":"<pre><code>rename workspace &lt;old_name&gt; to &lt;new_name&gt; # Renames the workspace with &lt;old_name&gt; to &lt;new_name&gt;. Names are provided by the string: \"number: name\"\nrename workspace to &lt;new_name&gt;            # Renames the selected workspace\n</code></pre>"},{"location":"ipc/commands/rename/#example","title":"Example","text":"<pre><code>miraclemsg \"rename workspace 1 to \\\"2: hi\\\"\" # Rename workspace to to have number=2 and name=hi\nmiraclemsg \"rename workspace to 3\"           # Rename the selected workspace to have number=2\n</code></pre>"},{"location":"ipc/commands/resize/","title":"resize","text":"<p>Introduced in v0.4.0, the <code>resize</code> command allows users to to change the resize the currently selected container</p>"},{"location":"ipc/commands/resize/#example","title":"Example","text":"<pre><code>miraclemsg \"resize grow width 10\"  # Grow width by 10px\nmiraclemsg \"resize shrink height 10 ppt\"  # Shrinks the height by 10% of the screen\nmiraclemsg \"resize set 100px 50 ppt\"  # Sets the dimensions of the container to 100px width and 50% of the screen\n</code></pre>"},{"location":"ipc/commands/resize/#links","title":"Links","text":"<ul> <li>i3 documentation</li> </ul>"},{"location":"ipc/commands/sticky/","title":"sticky","text":"<p>Sticky windows to \"stick\" to the glass meaning that they are always on top and that they follow you when switch workspaces. This is useful for when you want to watch something while doing other work, video conferences while your switching workspace, and many other things.</p> <p>Being \"sticky\" only applies to floating windows.</p>"},{"location":"ipc/commands/sticky/#syntax","title":"Syntax","text":"<pre><code>sticky enable|disable|toggle\n</code></pre>"},{"location":"ipc/commands/sticky/#example","title":"Example","text":"<pre><code>miraclemsg sticky enable   # Make the focused window sticky\nmiraclemsg sticky disable  # Make the focused window not sticky\nmiraclemsg sticky toggle   # Toggle 'sticky' on the focused window (sticky=true in this case)\n</code></pre>"},{"location":"ipc/commands/swap/","title":"swap","text":"<p>Two containers can be swapped using the <code>swap</code> command. Each container will assume the position and geometry of the container that it was swapped with.</p> <p>The first container participating in the swapping can be selected via command criteria. The second container can be selected using one of the following methods:</p> <ul> <li>id: the app ID of the window</li> <li>mark: a container with the specified mark</li> </ul>"},{"location":"ipc/commands/swap/#syntax","title":"Syntax","text":"<pre><code>swap container with id|mark &lt;arg&gt;\n</code></pre>"},{"location":"ipc/commands/swap/#example","title":"Example","text":"<pre><code>miraclemsg mark swapee # Marks the focused container as 'swapee'\nmiraclemsg focus left  # Focus the container to the left of 'swapee'\nmiraclemsg swap container with mark swapee  # Swaps the focused container with the container marked 'swapee'\n</code></pre>"},{"location":"ipc/commands/swap/#links","title":"Links","text":"<ul> <li>i3 documentation</li> </ul>"},{"location":"ipc/commands/workspace/","title":"workspace","text":"<p>The <code>workspace</code> command lets you switch to a different workspace.</p> <p><code>workspace next</code> focuses the numerically greater workspace after the currently focused one. <code>workspace prev</code> focuses in the opposite direction. <code>workspace next_on_output</code> and <code>workspace prev_on_output</code> does the same thing as the previous two commands, but instead the focus list is confined to those on the focused output.</p> <p><code>workspace back_and_forth</code> focuses the previously focused workspace.</p> <p><code>workspace [--no-auto-back-and-forth] &lt;name&gt;</code> focuses a workspace by name.</p> <p><code>workspace [--no-auto-back-and-forth] number &lt;name&gt;</code> focuses a workspace by name and number.</p>"},{"location":"ipc/commands/workspace/#syntax","title":"Syntax","text":"<pre><code>workspace next|prev|next_on_output|prev_on_output\nworkspace back_and_forth\nworkspace [--no-auto-back-and-forth] &lt;name&gt;\nworkspace [--no-auto-back-and-forth] number &lt;name&gt;\n</code></pre>"},{"location":"ipc/commands/workspace/#example","title":"Example","text":"<pre><code>miraclemsg workspace 1     # Focus workspace 1\nmiraclemsg workspace next  # Focus workspace after 1 (e.g. if workspace 3 exists, 3 would be focused)\nmiraclemsg workspace hi    # Focus non-numeric workspace named \"hi\"\n</code></pre>"},{"location":"ipc/events/binding/","title":"binding (0x80000005)","text":"<p>Sent whenever a binding is triggered in resposne to keyboard or mouse input.</p>"},{"location":"ipc/events/binding/#payload","title":"Payload","text":"<pre><code>{\n    \"change\": \"run\", // Always 'run'\n    \"binding\": {\n        \"command\": \"string\",              // Command that was run\n        \"event_state_mask\": \"string[]\",   // Moifiers being held\n        \"input_code\": \"integer\",          // Xkb keysym\n        \"symbol\": \"string\",               // Stringified keysym \n        \"input_type\": \"keyboard | mouse\"  // Input type\n    }\n}\n</code></pre>"},{"location":"ipc/events/binding/#example","title":"Example","text":"<pre><code>{\n    \"change\": \"run\",\n    \"binding\": {\n            \"command\": \"workspace 2\",\n            \"event_state_mask\": [\n                \"meta\",\n            ],\n            \"input_code\": 0,\n            \"symbol\": \"2\",\n            \"input_type\": \"keyboard\"\n    }\n}\n</code></pre>"},{"location":"ipc/events/output/","title":"workspace (0x80000001)","text":"<p>Sent when outputs are updated.</p>"},{"location":"ipc/events/output/#payload","title":"Payload","text":"<p>The payload is always the following, I am not kidding and I have no idea why:</p> <pre><code>{\n    \"change\": \"unspecified\"\n}\n</code></pre>"},{"location":"ipc/events/tick/","title":"tick (0x80000007)","text":"<p>Sent when an ipc client sends a SEND_TICK message.</p>"},{"location":"ipc/events/tick/#payload","title":"Payload","text":"<pre><code>{\n    \"first\": boolean, // Whether this event was triggered by subscribing to the tick events\n    \"payload\": string, // The payload that was provided to a SEND_TICK message, if any. Otherwise an empty string.\n}\n</code></pre>"},{"location":"ipc/events/tick/#example","title":"Example","text":"<pre><code>{\n    \"first\": true,\n    \"payload\": \"\"\n}\n</code></pre>"},{"location":"ipc/events/window/","title":"window (0x80000003)","text":"<p>Sent whenever an event involving a window occurs such as opening, focusing, or closing.</p>"},{"location":"ipc/events/window/#payload","title":"Payload","text":"<pre><code>{\n    \"change\": \"string\",\n    \"container\": \"object\"\n}\n</code></pre> <p>The <code>change</code> string is one of the following:</p> TYPE DESCRIPTION new The window was created close The window was closed focus The window was focused fullscreen_mode The window's fullscreen mode has changed move The window has been reparented in the tree mark A mark has been added or removed from the window <p>The <code>container</code> is an object representing the container for that window. You may see an example below.</p>"},{"location":"ipc/events/window/#example","title":"Example","text":"<pre><code>{\n    \"change\": \"new\",\n    \"container\": {\n            \"id\": 12,\n            \"name\": null,\n            \"rect\": {\n                \"x\": 0,\n                \"y\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            \"focused\": false,\n            \"focus\": [\n            ],\n            \"border\": \"none\",\n            \"current_border_width\": 0,\n            \"layout\": \"none\",\n            \"percent\": 0.0,\n            \"window_rect\": {\n                \"x\": 0,\n                \"y\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            \"deco_rect\": {\n                \"x\": 0,\n                \"y\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            \"geometry\": {\n                \"x\": 0,\n                \"y\": 0,\n                \"width\": 1124,\n                \"height\": 422\n            },\n            \"window\": 4194313,\n            \"urgent\": false,\n            \"floating_nodes\": [\n            ],\n            \"type\": \"con\",\n            \"pid\": 19787,\n            \"app_id\": null,\n            \"window_properties\": {\n                \"class\": \"URxvt\",\n                \"instance\": \"urxvt\",\n                \"transient_for\": null\n            },\n            \"nodes\": [\n            ]\n    }\n    }\n</code></pre>"},{"location":"ipc/events/workspace/","title":"workspace (0x80000000)","text":"<p>Sent whenever an event involving a workspace occurs such as creation, focusing, removal.</p>"},{"location":"ipc/events/workspace/#payload","title":"Payload","text":"<pre><code>{\n    \"change\": \"string\",\n    \"current\": \"object\", // An object representing the workspace or null for 'reload' changes\n    \"old\": \"object\" // For a 'focus' change, an object representing the workspace being switched from. Otherwise, null.\n}\n</code></pre> <p>The <code>change</code> string is one of the following:</p> TYPE DESCRIPTION init The workspace was created empty The workspace is empty and is being destroyed since it is not visible focus The workspace was focused. See the old property for the previous focus move The workspace was moved to a different output rename The workspace was renamed reload The configuration file has been reloaded"},{"location":"ipc/events/workspace/#example","title":"Example","text":"<pre><code>{\n    \"change\": \"init\",\n    \"old\": null,\n    \"current\": {\n            \"id\": 10,\n            \"name\": \"2\",\n            \"rect\": {\n                \"x\": 0,\n                \"y\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            \"focused\": false,\n            \"focus\": [\n            ],\n            \"border\": \"none\",\n            \"current_border_width\": 0,\n            \"layout\": \"splith\",\n            \"percent\": null,\n            \"window_rect\": {\n                \"x\": 0,\n                \"y\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            \"deco_rect\": {\n                \"x\": 0,\n                \"y\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            \"geometry\": {\n                \"x\": 0,\n                \"y\": 0,\n                \"width\": 0,\n                \"height\": 0\n            },\n            \"window\": null,\n            \"urgent\": false,\n            \"floating_nodes\": [\n            ],\n            \"num\": 2,\n            \"output\": \"eDP-1\",\n            \"type\": \"workspace\",\n            \"representation\": null,\n            \"nodes\": [\n            ]\n    }\n}\n</code></pre>"}]}